Unnecessary complexity is a Bad Thing. When people think about the complexity of a software system, they usually think about the complexity of the source code, but another important measure of complexity is the number of allowable states the system has. Complexity in code has the merit of being explicit, but state is a big source of implicit complexity.

The "DRY principle":http://en.wikipedia.org/wiki/Don't_repeat_yourself, which is a good way to reduce complexity in a code base, gets a lot of attention, but keeping the number of states to a minimum is an under-rated way of avoiding unnecessary system complexity.

* Give some examples (single boolean nil/false/true, two non-independent booleans, etc) and explain the advantages/disadvantages of adding constraints and/or limiting the number of "moving parts" from early in a project
* Write something about "meaningless states should not be representable":http://stackoverflow.com/questions/3989264/best-explanation-for-languages-without-null/3990754#3990754


* Maybe write something about the "simplest thing that can possibly work":http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html i.e. the lesser understood bit about refactoring towards the simplest system possible that satisfies all the current requirements/tests. I think this is about flattening the cost of change curve...?
* Maybe write something about the idea of a "Good Citizen":http://docs.codehaus.org/display/PICO/Good+Citizen
* I reckon it's more common to have unnecessary states in a system than to be missing necessary states
* It might seem like you need more code to suitably constrain the system, but the reduction in "client" code and the likelihood of missing edge cases are less obvious
* Less time needed to clean up bad code


A simple example of unnecessary state-based complexity in Ruby/Rails is where a ActiveRecord model has a boolean attribute. A common situation is for this attribute to have no model validation nor default value in the model code, and for the corresponding database column to have no default value nor a nullable constraint, since it's most likely been created using the default migration @create_table@ or @add_column@ methods with the default options.

class CreateAccount < ActiveRecord::Migration
  def self.up
    create_table :accounts do |table|
      table.boolean :active
    end
  end
  def self.down
    drop_table :accounts
  end
end

class Account < ActiveRecord::Base
end

:render_as: Blog
:written_with: Textile
:kind: blog
:draft: true
:author: james-mead
