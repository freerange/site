# Building Caffeine Monitor

Just over two weeks ago the second instalment of [Build Conference][] was coming to an end. I had the pleasure of attending this hand made web design conference set in stormy Belfast, tales of which I regaled on my own [website](http://jasoncale.com/articles/9-build-conference-2010) 

[Caffeine Monitor][] is an application we produced for the conference. [Andy McMillan](http://twitter.com/#!/goodonpaper) who runs Build approached [Free Range][] back in September with the idea to create a realtime visualisation of attendee caffeine consumption. 

Sponsored by [Campaign Monitor][], we collaborated with [Nicholas Felton][] who designed the infographic to display the consumption figures.

<a href="http://farm5.static.flickr.com/4104/5176210585_536ac39a26_o.png" title="View full size">
  <img style="width: 100%" src="http://farm5.static.flickr.com/4104/5176210585_536ac39a26_o.png" alt="Caffeine monitor dashboard: Displaying the volume of caffeine consumed over time." />
</a>


## Application biology.

The application consists of two main parts: 
  
1. Secure form to capture drinks consumed. 
2. HTML/CSS based infographic displaying consumption data.

To do this we implemented or made use of the following:

* Simple [Rails](http://rubyonrails.org) application hosted on [Heroku](http://heroku.com).
* HTML5 offline support using [Rack-offline][] for manifest generation.
* HTML5 local storage to record drinks when offline.
* Javascript to sync with server using JSON.
* iPhone / iPad optimised screen for data collection.
* CSS3 Media queries to target display resolutions.
  
### Data collection

The way we collected data had to be really really simple. Andy had lined up some volunteers to help out on the day, who would record all the drinks people picked up from the refreshment stands and in the market at lunch. They would likely be using iphone's or ipod touch's to collect the data, so we made the following assessments about the UI:

* It should be really simple.
* It should to be really responsive.
* It should collect data with or without internet connection.
* It should recover from losing focus (such as getting a call).
* It should be free of distracting or unnecessary interaction. 

__NOTE__: In the next section I refer to _unsynced_ items which means drinks recorded in the local storage but not on the server, I'll discuss that whole business shortly, so please bare with me until then.


<div style="float: right; width: 50%; margin-left: 1.5em">
  <a href="http://farm6.static.flickr.com/5041/5223501591_32b5475f8b_o.png" title="View full size">
    <img width="100%" src="http://farm6.static.flickr.com/5041/5223501591_ee793ba1c0.jpg" alt="Caffeine Monitor Iphone interface">
  </a>
  <p style="font-size: 1.2em; padding-top: 0.5em; color: #aaa; text-align: center">Drink capture screen on an iPhone</p>
</div>

#### A simple interface.
We created a big button for each drink type. They click the button with each drink, but they also need some visual feedback so we added counters to increment with each click. Instantly they see that drinks are being recorded which is enough information to remove anxiety but not get in the way of the (next) primary action.

The counter has the total for each drink type, with any unsynced items in parenthesis; as drinks are synced on the server this number transfers to the main count.  

Periodically the totals are updated from the central server, to reflect drinks recorded by the other volunteers.

#### Make it responsive.

By upgrading the form to post via ajax we prevented a page reload. Firing off an asynchronous request we delegate handling the response to a callback (some time in the future) and return control back to the user ready for the next submit which could be a mere fraction of a second later.

In fact we went a step further. Because we were using local storage to store the drinks before sending them off to the server, all we needed to do was record the drink the database and the posting of the drink data could happen completely independently which came in handy.

##### Testing in the wild.

Riding home on the tube one evening I sat and recorded a few hundred drinks offline. Once I surfaced the data started syncing as expected, but subsequent button presses started to lag, the app ground to a halt. Each unsynced drink generated an ajax post which was overwhelming the app &mdash; _oh dear_.

The next step was to modify our approach to post a single payload of all unsynced drinks. As soon as this was deployed all those pending drinks immediately synced and the app sprung back to life &mdash; _Result_.

#### Recording drinks whilst offline.
To achieve this we used HTML5 local storage, a simple SQLite database which we controlled via javascript.

We extended the submit form to record a drink in the local database instead of submitting to the server. We note the type and time of each drink purchased assigning it with a UUID and marking it as unsynced. 

We periodically post all the drinks to the server which responds with the drinks it has recorded successfully, they are then marked locally as synced. We use the UUID to ensure that drinks aren't registered more than once.

#### Remove unnecessary interaction.

  
### Infographic

Nicholas supplied us with a HTML/CSS template which became the basis for the infographic. The raw drink records were recorded in a database, which we exposed as the relevant statistics to be placed into the template.
      
#### Should it scale?
The template was designed to run fullscreen on a projector, so it was designed to be fixed in size. However we decided it should scale so if the URL was shared publicly it would display in regular browsers etc. I re-wrote the HTML/CSS to make this a little simpler and added a few media queries to compensate for the shift in display size. 

#### Browser rounding inaccuracy.
The bar chart to display consumption over time was initially implemented with column widths set as a percentage of the entire page; however the percentages were fractions (width: 10.60%). 

The large layout and browsers' tendency to round numbers caused cumulative inaccuracy the viewed at full size. Resizing the browser just made it worse &mdash; so we had to fix it.

We re-wrote the markup to group everything into a hourly blocks (which were further divided into 15 minutes and 5 minutes sub-elements), this meant we could position everything that happened with that hour and any inaccuracy would only be constrained to that hour at most instead of over the total time frame (as before). 

This also meant the whole bar graph scaled rather more elegantly; we took the chance to combine the schedule information and time axis into each hour block as well they scaled in line as well as being grouped semantically.


#### Caching content.
  
We assumed the following things incorrectly:
  
  * A static .html page must be used to get the iphone to work offline.
  * [Rack-offline][] will generate a manifest regardless of environment (development, production, etc)

The first part is possibly still valid, and is certainly the collective wisdom one is led to via google. But this assumption coupled with the second mistake led us down a few rabbit holes which could have been avoided.

Rack-offline intentionally doesn't work in development mode, it essentially a caching mechanism which is a domain usually reserved for production environments &mdash; you don't want to have to deal with caches when writing the actual code.

However we were writing code which was reliant on this behaviour, we forgot about this quite a few times and it added an extra burden to the work. Just keep it in mind and you should be fine.

#### You don't need a static .html page.

Using Rails' [cache_page](http://api.rubyonrails.org/classes/ActionController/Caching/Pages.html#method-i-cache_page) will suffice and the iphone will be fine.

At first, we thought we'd have create a static .html page in order to get the iphone to cache the data input page successfully to work offline. This was partly due to information we'd read on the web and the fact that Rack-offline will only properly cache content when run in an production environment.

  * Tried static page in public but realised that we could cache_page in the controller.  I think we turned this off in the end though.
  * Rack-offline intentionally doesn't work in development - this was confusing.  The chrome error for this is also confusing - it makes it sound as though some elements were cached when, in fact, nothing was.
  * We only specified the app-cache manifest on the data entry page (we created a separate layout) as we didn't want the stats page cached.
  * Problems with clearing app cache - there doesn't appear to be a way to do it through the browser.

### Security

  * We wanted it to be a 'desktop' app
  * It was hard to get it 'secure' as a 'desktop' app.
  * HTTP Basic auth did work but prompted you for the username/password on every request.
  * Cookies weren't shared across the browser and 'desktop' app.
  * Redirects aren't followed in 'desktop' apps which means we couldn't use the standard login form.
  
### Data entry

  * Bulk upload of data for performance reasons
  * Optimised for ios devices - ipad, iphone, ipod touch
  
### Performance

  * We increased the number of heroku dynos and they easily coped with the traffic
  * We cached the data for the bargraph at 5 minute intervals
  
### Stats page

  * CSS/Scaling of the stats page
  * Media queries
  * Bar graphs
  
## On the day.

There is something to be said for the process in which it removes a lot of the stress around insane deadlines, but every go-live event with software is stressful, so it helps to have a development process which can cope with change and work to reassure you that last minute changes are going to work.

  
[Build Conference]: http://buildconf.com
[Campaign Monitor]: http://campaignmonitor.com
[Caffeine Monitor]: http://cm.buildconf.com
[Nicholas Felton]: http://feltron.com
[Rack-offline]: https://github.com/wycats/rack-offline
[Free Range]: http://gofreerange.com
[Kalv]: http://gofreerange.com/#kalvir-sandhu
[James]: http://gofreerange.com/#james-adam
[Chris]: http://gofreerange.com/#chris-roos
  
:render_as: Blog
:kind: draft
:written_with: Kramdown
:author: jason-cale